{"version":3,"sources":["components/UsersPresentation/UsersPresentation.js","components/getName.js","components/SearchDropdown/SearchDropdown.js","components/SearchInput/SearchInput.js","components/Directory/Directory.js","App.js","serviceWorker.js","index.js"],"names":["UsersPresentation","className","getName","name","slice","toUpperCase","length","SearchDropdown","props","toggle","bind","state","dropdownOpen","this","setState","prevState","Dropdown","isOpen","DropdownToggle","caret","gender","DropdownMenu","Array","from","genders","map","element","DropdownItem","key","onClick","event","filterUsers","Component","SearchInput","type","onChange","findUsers","Directory","modal","backdrop","changeBackdrop","e","value","target","JSON","parse","Container","Row","users","Col","md","xs","sm","data-email","email","cell","selectUser","src","picture","thumbnail","alt","title","first","last","Modal","ModalHeader","ModalBody","selectedUser","large","phone","location","App","originalUsers","findUser","Set","dataset","parentElement","user","find","console","log","innerText","toLowerCase","filter","matches","indexOf","fetch","then","response","json","results","getGenders","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3240222.chunk.js","sourcesContent":["import React from 'react';\nimport './UserPresentation.css';\n\nfunction UsersPresentation() {\n  return (\n    <section className=\"UserPresentation\">\n      <h3>Users</h3>\n      <p>\n        If you want to get contact information to specific user, just select\n        group and then select her from the list below\n      </p>\n    </section>\n  );\n}\n\nexport default UsersPresentation;\n","export default function getName(name) {\n  return name.slice(0, 1).toUpperCase() + name.slice(1, name.length);\n}\n","import React, { Component } from 'react';\nimport './SearchDropdown.css';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap';\nimport getName from '../getName';\n\nclass SearchDropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    return (\n      <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle caret>{this.props.gender}</DropdownToggle>\n        <DropdownMenu>\n          {Array.from(this.props.genders).map(element => {\n            return (\n              <DropdownItem\n                key={element}\n                onClick={event => {\n                  this.props.filterUsers(event);\n                }}\n              >\n                {getName(element)}\n              </DropdownItem>\n            );\n          })}\n          <DropdownItem\n            onClick={event => {\n              this.props.filterUsers(event);\n            }}\n          >\n            All Users\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default SearchDropdown;\n","import React from 'react';\nimport './SearchInput.css';\n\nfunction SearchInput(props) {\n  return (\n    <section className=\"SearchInput\">\n      <p>Type the name of any user</p>\n      <input\n        type=\"text\"\n        onChange={event => {\n          props.findUsers(event);\n        }}\n      />\n    </section>\n  );\n}\n\nexport default SearchInput;\n","import React, { Component } from 'react';\nimport './Directory.css';\nimport getName from '../getName';\nimport { Modal, ModalHeader, ModalBody, Container, Row, Col } from 'reactstrap';\n\nclass Directory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      backdrop: true\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.changeBackdrop = this.changeBackdrop.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  changeBackdrop(e) {\n    let value = e.target.value;\n    if (value !== 'static') {\n      value = JSON.parse(value);\n    }\n    this.setState({ backdrop: value });\n  }\n\n  render() {\n    return (\n      <section>\n        <Container>\n          <Row>\n            {this.props.users.map(element => {\n              return (\n                <Col\n                  md=\"4\"\n                  xs=\"6\"\n                  sm=\"6\"\n                  data-email={element.email}\n                  key={element.cell}\n                  className=\"user-container\"\n                  onClick={event => {\n                    this.props.selectUser(event);\n                    this.toggle();\n                  }}\n                >\n                  <img\n                    className=\"thumb\"\n                    src={element.picture.thumbnail}\n                    alt=\"profilepic\"\n                  />\n                  <span>{`${getName(element.name.title)}${\n                    element.name.title === 'mr' ||\n                    element.name.title === 'mrs' ||\n                    element.name.title === 'ms'\n                      ? '.'\n                      : ''\n                  }\n                 ${getName(element.name.first)} \n                 ${getName(element.name.last)}`}</span>\n                </Col>\n              );\n            })}\n          </Row>\n        </Container>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n          backdrop={this.state.backdrop}\n        >\n          <ModalHeader toggle={this.toggle} />\n          <ModalBody>\n            <h2>\n              {this.props.selectedUser\n                ? `${getName(this.props.selectedUser.name.title)}${\n                    this.props.selectedUser.name.title === 'mr' ||\n                    this.props.selectedUser.name.title === 'mrs' ||\n                    this.props.selectedUser.name.title === 'ms'\n                      ? '.'\n                      : ''\n                  }\n                 ${getName(this.props.selectedUser.name.first)} \n                 ${getName(this.props.selectedUser.name.last)}`\n                : ''}\n            </h2>\n            <img\n              src={\n                this.props.selectedUser\n                  ? this.props.selectedUser.picture.large\n                  : ''\n              }\n            />\n            <p>\n              Phone:{' '}\n              {this.props.selectedUser ? this.props.selectedUser.phone : ''}\n            </p>\n            <p>\n              Email:{' '}\n              {this.props.selectedUser ? this.props.selectedUser.email : ''}\n            </p>\n            <p>\n              State:{' '}\n              {this.props.selectedUser\n                ? getName(this.props.selectedUser.location.state)\n                : ''}\n            </p>\n          </ModalBody>\n        </Modal>\n      </section>\n    );\n  }\n}\n\nexport default Directory;\n","//Library\nimport React, { Component } from 'react';\n//Components\nimport UsersPresentation from './components/UsersPresentation/UsersPresentation';\nimport SearchDropdown from './components/SearchDropdown/SearchDropdown';\nimport SearchInput from './components/SearchInput/SearchInput';\nimport Directory from './components/Directory/Directory';\n\n//Styles\nimport './App.css';\nimport { Container } from 'reactstrap';\n//Getname\nimport getName from './components/getName';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      genders: [],\n      originalUsers: [],\n      selectedUser: null,\n      gender: 'All Users'\n    };\n    this.filterUsers = this.filterUsers.bind(this);\n    this.selectUser = this.selectUser.bind(this);\n    this.findUser = this.findUser.bind(this);\n  }\n\n  //Function to get the gender of the users\n  getGenders(users) {\n    let genders = users.map(element => element.gender);\n    this.setState({ genders: new Set(genders) });\n  }\n\n  //Function to select an user and highlight the container\n  selectUser(event) {\n    let email = event.target.dataset.email\n      ? event.target.dataset.email\n      : event.target.parentElement.dataset.email;\n    let user = this.state.originalUsers.find(element => {\n      return element.email === email;\n    });\n    this.setState({ selectedUser: user }, () =>\n      console.log(this.state.selectedUser)\n    );\n  }\n\n  //Function to filter the users with the dropdown event\n  filterUsers(event) {\n    if (\n      event.target.innerText.toLowerCase() === 'male' ||\n      event.target.innerText.toLowerCase() === 'female'\n    ) {\n      let users = this.state.originalUsers.filter(element => {\n        return element.gender === event.target.innerText.toLowerCase();\n      });\n      this.setState({\n        users: users,\n        selectedUser: null,\n        gender: getName(event.target.innerText)\n      });\n    } else {\n      this.setState({\n        users: this.state.originalUsers,\n        selectUser: null,\n        gender: 'All Users'\n      });\n    }\n  }\n\n  findUser(event) {\n    let value = event.target.value.toLowerCase();\n    let matches = this.state.originalUsers.filter(user => {\n      return (\n        user.name.first.indexOf(value) !== -1 ||\n        user.name.last.indexOf(value) !== -1\n      );\n    });\n    if (this.state.gender === 'male' || this.state.gender === 'female') {\n      matches = matches.filter(\n        user => user.gender === this.state.gender.toLowerCase()\n      );\n    }\n\n    this.setState({ users: matches });\n  }\n\n  //Lifecycle method to fetch users data\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=21')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ users: users.results, originalUsers: users.results });\n        this.getGenders(users.results);\n      });\n  }\n  render() {\n    return (\n      <section className=\"App\">\n        <UsersPresentation />\n        <Container className=\"filters\">\n          <SearchDropdown\n            genders={this.state.genders}\n            filterUsers={this.filterUsers}\n            gender={this.state.gender}\n          />\n          <SearchInput findUsers={this.findUser} />\n        </Container>\n\n        <Directory\n          users={this.state.users}\n          selectedUser={this.state.selectedUser}\n          selectUser={this.selectUser}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}